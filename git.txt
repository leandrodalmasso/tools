------------------------------- INSTALL -----------------------------------

sudo apt-get install git

--------------------------------- MAN -------------------------------------

man git <command>

-------------------------------- CONFIG -----------------------------------

config for the current repo:
git config
git config --local

config for an OS user:
git config --global

config for a machine (all users):
git config --system

list:
git config --list
git config --global --list

unset:
git config --unset user.name
git config --global --unset user.name

remember credentials:
git config credential.helper store
push or pull one time

aliases:
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.pl pull
git config --global alias.lo "log --oneline"
git config --global alias.unstage "reset HEAD --"
git config --global alias.last "log -1 HEAD"
git config --global --unset alias.co

vscode as default editor:
git config --global core.editor "code --wait"

-------------------------------- INIT -------------------------------------

transform the current directory into a Git repository:
git init
git init --bare

-------------------------------- CLONE ------------------------------------

clone a remote repo:
git clone <url>

clone a local repo:
git clone <repo> <directory>

------------------------------- WORKFLOW ----------------------------------

1. Branching
2. Commits
3. Pull Request
4. Collaborate
5. Merge

git status

git branch <branch name>

git checkout <branch name>
git checkout -b <branch name>

git add <file>
git add <directory>
git add .

git commit -m "commit message"

git pull
git pull origin <branch name>

git push origin <branch name>

----------------------------------- LOG -----------------------------------

git log
git log --oneline

----------------------------- UNSTAGE CHANGES -----------------------------

git reset HEAD
git reset <file>

-------------------------- UNDO UNSTAGED CHANGES --------------------------

git restore .

------------------------------ UNDO COMMITS -------------------------------

undo a commit with another commit:
git revert <commit-ish>
git revert HEAD

undo maintaining changes:
git reset <commit-ish>
git reset HEAD~

undo loosing uncommited changes:
git reset --hard <commit-ish>
git reset --hard HEAD~

------------------------- CHANGE LOCAL COMMITS ----------------------------

change last commit message:
git commit --amend -m "updated message"

add files to last commit:
git add
git commit --amend --no-edit

----------------------------- RESTORE CHANGES -----------------------------

git restore .
git restore <file>

-------------------------------- BRANCHES ---------------------------------

rename current branch:
git branch -m <newname>

know the parent branch:
git log and see commits

--------------------------------- STASH -----------------------------------

git stash save "message"
git stash save -u "message"
git stash list
git stash apply
git stash apply stash@{0}
git stash drop stash@{0}
git stash pop
git stash clear

---------------------------- REMOVE UNTRACKED -----------------------------

git clean -f -d

------------------------------ CHERRY PICK --------------------------------

pick a commit and appended it to the current working HEAD:
git cherry-pick -m 1 <HASH-1> <HASH-2> ...
1 === parent branch

---------------------------------- DIFF -----------------------------------

comparing files between two different commits:
git diff <commitSha> <commitSha>
git diff <commitSha> <commitSha> <file>

--------------------------------- SQUASH ----------------------------------

git rebase --interactive HEAD~N

reorder

pick d94e78 Prepare the workbench for feature Z     --- older commit
s 4e9baa Cool implementation 
s afb581 Fix this and that  
s 643d0e Code cleanup
s 87871a I'm ready! 
s 0c3317 Whoops, not yet... 
s 871adf OK, feature Z is fully implemented      --- newer commit

save files and write commit message

git pull
git push

----------------------------------- SSH -----------------------------------

1.
create ssh keys:
cd ~/.ssh
ssh-keygen -t rsa -C "lean-office@gmail.com" -f "lean-office"
ssh-keygen -t rsa -C "lean-personalgmail.com" -f "lean-personal"

2.
add keys to ssh agent:
eval "$(ssh-agent -s)"
ssh-add -K ~/.ssh/lean-office
ssh-add -K ~/.ssh/lean-personal

3.
add ssh keys to GitHub:
clip < ~/.ssh/lean-office.pub

4.
create a config file and make host entries:
cd ~/.ssh
touch config
open config
--------------------------------------------
#lean-office account
Host github.com-lean-office
HostName github.com
User git
IdentityFile ~/.ssh/lean-office

#lean-personal account
Host github.com-lean-personal
HostName github.com
User git
IdentityFile ~/.ssh/lean-personal
--------------------------------------------

5.
clone repos with proper host:
git clone git@github.com-{your-username}:{owner-user-name}/{the-repo-name}.git

6.
config user.email and user.name in every repo:
git config user.email "lean-office@gmail.com"
git config user.name "lean-office"
